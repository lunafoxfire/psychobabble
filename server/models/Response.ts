import {
  Entity, Column, PrimaryGeneratedColumn, ManyToOne,
  Repository, getRepository
} from "typeorm";
import { User } from "./User";
import { Video } from "./Video";
import { Program } from "./Program";

/** Represents a subject's response to a Video in a Program, to be assesed by an admin. */
@Entity('responses')
export class Response {
  /** Autogenerated id as a UUID string. */
  @PrimaryGeneratedColumn("uuid")
  id: string;

  /** URL of the subject's audio response to the video. */
  @Column()
  audio_url: string;

  /** Speech-to-text parse of the audio response. Nullable. */
  @Column({nullable: true})
  text_version: string;

  /** Score assigned by an admin during assessment of the Response. */
  @Column({nullable: true})
  score: number;

  /** Whether this Response has been reviewed by an admin. */
  @Column()
  reviewed: boolean;

  /** The subject that this Response belongs to. */
  @ManyToOne(type => User, user => user.responses)
  subject: User;

  /** The Video that this was a Response to. */
  @ManyToOne(type => Video, video => video.responses)
  video: Video;

  /** The Program that this Response belongs to. */
  @ManyToOne(type => Program, program => program.responses)
  program: Program;
}

export class ResponseService {
  public responseRepo: Repository<Response>;

  constructor(responseRepo: Repository<Response> = null) {
    this.responseRepo = responseRepo || getRepository(Response);
  }

  /** Saves a new Response to the database. */
  public async saveNewAsync(responseOptions: NewResponseOptions) {
    let newResponse = new Response();
      newResponse.audio_url = responseOptions.audio_url;
      newResponse.text_version = null; // TODO: generate this
      newResponse.score = null;
      newResponse.reviewed = false;
      newResponse.subject = responseOptions.subject;
      newResponse.video = responseOptions.video;
      newResponse.program = responseOptions.program;
    return this.responseRepo.save(newResponse);
  }
}

/** All options required to create a new Response. */
export interface NewResponseOptions {
  /** URL of the subject's audio response to the video. */
  audio_url: string;
  /** The subject that this Response belongs to. */
  subject: User;
  /** The Video that this was a Response to. */
  video: Video;
  /** The Program that this Response belongs to. */
  program: Program;
}
