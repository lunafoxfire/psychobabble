import {
  Entity, Column, PrimaryGeneratedColumn, OneToOne,
  Repository, getRepository
} from "typeorm";
import { User } from './User';
import * as crypto from 'crypto';

@Entity('pass_reset_tokens')
export class PassResetToken {

  /** Autogenerated id as an integer. */
  @PrimaryGeneratedColumn()
  id: number

  /** 16 character long hex code to be attatched to password reset url */
  @Column()
  code: string

  /** Expiration date of this token as a UNIX timestamp. */
  @Column({type:'bigint'})
  expiration: number;

  /** The User this token is associated with. */
  @OneToOne(type => User)
  user: User;
}

export class PassResetTokenService {
  public tokenRepo: Repository<PassResetToken>;

  constructor(tokenRepo: Repository<PassResetToken> = null) {
    this.tokenRepo = tokenRepo || getRepository(PassResetToken);
  }

  public async generatePassTokenAsync() {
    let minBeforeExpire = 15;
    let newToken = new PassResetToken();
    newToken.code = crypto.randomBytes(8).toString('hex');
    newToken.expiration = new Date().getTime() + (minBeforeExpire * 60 * 1000);
    await this.tokenRepo.save(newToken);
    return newToken;
  }
}
